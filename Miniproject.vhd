
---------------------------------------------------------
--  This code is generated by Terasic System Builder
---------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity Miniproject is
port
(

	------------ CLOCK ------------
	CLOCK2_50       	:in    	std_logic;
	CLOCK3_50       	:in    	std_logic;
	CLOCK4_50       	:in    	std_logic;
	CLOCK_50        	:in    	std_logic;

	------------ KEY ------------
	KEY             	:in    	std_logic_vector(3 downto 0);

	------------ SW ------------
	SW              	:in    	std_logic_vector(9 downto 0);

	------------ LED ------------
	LEDR            	:out   	std_logic_vector(9 downto 0);

	------------ Seg7 ------------
	HEX0            	:out   	std_logic_vector(6 downto 0);
	HEX1            	:out   	std_logic_vector(6 downto 0);
	HEX2            	:out   	std_logic_vector(6 downto 0);
	HEX3            	:out   	std_logic_vector(6 downto 0);
	HEX4            	:out   	std_logic_vector(6 downto 0);
	HEX5            	:out   	std_logic_vector(6 downto 0);

	------------ SDRAM ------------
	DRAM_ADDR       	:out   	std_logic_vector(12 downto 0);
	DRAM_BA         	:out   	std_logic_vector(1 downto 0);
	DRAM_CAS_N      	:out   	std_logic;
	DRAM_CKE        	:out   	std_logic;
	DRAM_CLK        	:out   	std_logic;
	DRAM_CS_N       	:out   	std_logic;
	DRAM_DQ         	:inout 	std_logic_vector(15 downto 0);
	DRAM_LDQM       	:out   	std_logic;
	DRAM_RAS_N      	:out   	std_logic;
	DRAM_UDQM       	:out   	std_logic;
	DRAM_WE_N       	:out   	std_logic;

	------------ ADC ------------
	ADC_CONVST      	:out   	std_logic;
	ADC_DIN         	:out   	std_logic;
	ADC_DOUT        	:in    	std_logic;
	ADC_SCLK        	:out   	std_logic;

	------------ GPIO, GPIO connect to GPIO Default ------------
	GPIO            	:inout 	std_logic_vector(35 downto 0)      
);

end entity;



---------------------------------------------------------
--  Structural coding
---------------------------------------------------------


architecture rtl of Miniproject is

-- declare --
component niosiisystem is
		port (
			adc_sclk      : out   std_logic;                                        -- sclk
			adc_cs_n      : out   std_logic;                                        -- cs_n
			adc_dout      : in    std_logic                     := 'X';             -- dout
			adc_din       : out   std_logic;                                        -- din
			clk_clk       : in    std_logic                     := 'X';             -- clk
			gpio_export   : out   std_logic_vector(15 downto 0);                    -- export
			ledr_export   : out   std_logic_vector(9 downto 0);                     -- export
			reset_reset   : in    std_logic                     := 'X';             -- reset
			sdram_addr    : out   std_logic_vector(12 downto 0);                    -- addr
			sdram_ba      : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_cas_n   : out   std_logic;                                        -- cas_n
			sdram_cke     : out   std_logic;                                        -- cke
			sdram_cs_n    : out   std_logic;                                        -- cs_n
			sdram_dq      : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			sdram_dqm     : out   std_logic_vector(1 downto 0);                     -- dqm
			sdram_ras_n   : out   std_logic;                                        -- ras_n
			sdram_we_n    : out   std_logic;                                        -- we_n
			sdram_clk_clk : out   std_logic;                                        -- clk
			switch_export : in    std_logic_vector(9 downto 0)  := (others => 'X')  -- export
		);
	end component niosiisystem;
signal DQM : std_logic_vector (1 downto 0);
begin
DRAM_UDQM <= DQM(1);
DRAM_LDQM <= DQM(0);
-- body --
stage: niosiisystem port map
(
    adc_sclk      =>ADC_SCLK,
	 adc_cs_n      =>ADC_CONVST,
	 adc_dout      =>ADC_DOUT,
	 adc_din       =>ADC_DIN,
	 clk_clk       =>CLOCK_50,
	 gpio_export   =>GPIO(15 downto 0),
	 ledr_export   =>LEDR,
	 reset_reset   =>'0',
	 sdram_addr    =>DRAM_ADDR,
	 sdram_ba      =>DRAM_BA,
	 sdram_cas_n   =>DRAM_CAS_N,
	 sdram_cke     =>DRAM_CKE,
    sdram_cs_n    =>DRAM_CS_N,
	 sdram_dq      =>DRAM_DQ,
	 sdram_dqm     =>DQM,
	 sdram_ras_n   =>DRAM_RAS_N,
	 sdram_we_n    =>DRAM_WE_N,
	 sdram_clk_clk =>DRAM_CLK,
	 switch_export =>SW
);
end rtl;

